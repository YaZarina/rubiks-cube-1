/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. rubiks-cube.jj */
/*@egen*/options{
  STATIC=false;
}
PARSER_BEGIN(SI)
package ru.nsu.ci.translator;
import java.io.PrintStream;
  public class SI/*@bgen(jjtree)*/implements SITreeConstants/*@egen*/
   {/*@bgen(jjtree)*/
  protected JJTSIState jjtree = new JJTSIState();

/*@egen*/
   /*   public static void main(String[] args)
            throws ParseException, TokenMgrError, NumberFormatException
            {
              SI si=new SI(System.in);
              si.start(System.out);
            } */
          }
 PARSER_END(SI)

 SKIP: {" "}
 TOKEN:{  <EOL: "\n" | "\r" |"\r\n" >}
 TOKEN:{  <NUMBER : (["0"-"9"])+ >}
 TOKEN:{  <TURN: "TURN" >}
 TOKEN:{  <LETTER: "a" | "b" | "c">}
 TOKEN:{  <MOV: "MOV" >}
 TOKEN:{  <FOR: "FOR" >}
 TOKEN:{  <END: "END" >}
 TOKEN:{  <RESTART: "RESTART">}
 TOKEN:{  <CANCEL: "CANCEL" >}

 /*TOKEN:{  <EOL: "\n" | "\r" |"\r\n" >}
 TOKEN:{  <NUMBER : (["0"-"9"])+ >}
 TOKEN:{  <TURN: "\u0420\u0457\u0420\u0455\u0420\u0406\u0420\u00b5\u0421\u0402\u0420\u0405\u0421\u0453\u0421\u201a\u0421\u040a" ( < NUMBER> | < LETTER > )  < NUMBER> >}
 TOKEN:{  <LETTER: "\u0420\u00b0" | "\u0420\u00b1" | "\u0420\u0406">}
 TOKEN:{  <MOV: "\u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u2116\u0421\u201a\u0420\u0451" < NUMBER > >}
 TOKEN:{  <FOR: "\u0420\u0457\u0420\u0455\u0420\u0406\u0421\u201a\u0420\u0455\u0421\u0402\u0420\u0451\u0421\u201a\u0421\u040a" < NUMBER > >}
 TOKEN:{  <END: "\u0420\u0454\u0420\u0455\u0420\u0405\u0420\u00b5\u0421\u2020" >}
 TOKEN:{  <RESTART: "\u0420\u00b7\u0420\u00b0\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u0455">}
 TOKEN:{  <CANCEL: "\u0420\u0455\u0421\u201a\u0420\u0458\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u201a\u0421\u040a" < NUMBER > >}*/
 

 
 void start(PrintStream printStream) throws NumberFormatException:
 {/*@bgen(jjtree) start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
 }
 {/*@bgen(jjtree) start */
   try {
/*@egen*/
   (
     (
       
     t=<NUMBER>
     {       
       int previousValue= Integer.parseInt(t.image);
       printStream.println(previousValue);
     }
 | 
     <TURN>
     (
       < NUMBER > | < LETTER > <NUMBER> 
     )
 | 
     (
       <MOV> | < FOR > | < CANCEL >
     )
     (       
       < NUMBER >
     )
 | 
     <END>
 | 
     <RESTART>
)
<EOL>
   )*
  <EOF>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
 }